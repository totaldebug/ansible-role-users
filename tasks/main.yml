---
- name: Creating groups
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid | default(omit) }}"
  with_items: "{{ groups_to_create }}"
  become: true
  tags: ["users", "groups", "configuration"]

- name: Per-user group creation
  group:
    name: "{{ item.username }}"
    gid: "{{ item.gid | default(item.uid) | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
  with_items: "{{ users }}"
  when: "'group' not in item and users_create_per_user_group"
  become: true
  tags: ["users", "configuration"]

- name: Get all users from device
  getent:
    database: passwd
    key:
  tags: ["users", "configuration"]

- name: set fact when user exists
  set_fact:
    user_exists: true
  when: item.username in ansible_facts.getent_passwd
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

- name: set fact when user does not exists
  set_fact:
    user_exists: false
  when: item.username not in ansible_facts.getent_passwd
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

- name: User creation
  ansible.builtin.user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    # empty string removes user from all secondary groups
    groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
    append: "{{ item.append | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    password_lock: "{{ item.password_lock if item.password_lock is defined else false }}"
    comment: "{{ item.name if item.name is defined else '' }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default('/home/' + item.username) }}"
    create_home: "{{ item.create_home | default('true' if users_create_homedirs else 'false') }}"
    system: "{{ item.system | default(omit) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    expires: "{{ item.expires | default(omit) }}"
  with_items: "{{ users }}"
  when:
    - not user_exists
  changed_when: false
  become: true
  tags: ["users", "configuration"]

- name: Update Passwords
  ansible.builtin.user:
    name: "{{ item.username }}"
    update_password: "{{ item.update_password }}"
  when: item.update_password is defined
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

- name: SSH keys
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.ssh_key | join('\n') }}"
    path: "{{ item.home | default('/home/' + item.username) }}/{{ authorized_keys_file }}"
    exclusive: "{{ item.ssh_key_exclusive | default('true' if users_ssh_key_exclusive else 'false') }}"
  with_items: "{{ users }}"
  when: item.ssh_key is defined
  become: true
  tags: ["users", "configuration"]

- name: Setup user profiles
  blockinfile:
    block: "{{ item.profile }}"
    path: "{{ item.home | default('/home/' + item.username) }}/.profile"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    mode: 0644
    create: true
  when: users_create_homedirs and item.profile is defined
  become: true
  with_items: "{{ users }}"

- name: Deleted user removal
  user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  with_items: "{{ users_deleted }}"
  become: true
  tags: ["users", "configuration"]

- name: Deleted per-user group removal
  group:
    name: "{{ item.username }}"
    state: absent
  with_items: "{{ users_deleted }}"
  become: true
  when: users_create_per_user_group
  tags: ["users", "configuration"]
